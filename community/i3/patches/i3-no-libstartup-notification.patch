--- i3-config-wizard/main.c
+++ i3-config-wizard/main.c
@@ -44,9 +44,6 @@
 #include <xkbcommon/xkbcommon-x11.h>
 #include <xkbcommon/xkbcommon.h>

-#define SN_API_NOT_YET_FROZEN 1
-#include <libsn/sn-launchee.h>
-
 #include <X11/XKBlib.h>
 #include <X11/Xlib.h>
 #include <X11/keysym.h>
@@ -848,11 +845,6 @@
     CONFIG_WIZARD_ATOMS_XMACRO
 #undef xmacro

-    /* Init startup notification. */
-    SnDisplay *sndisplay = sn_xcb_display_new(conn, NULL, NULL);
-    SnLauncheeContext *sncontext = sn_launchee_context_new_from_environment(sndisplay, screen);
-    sn_display_unref(sndisplay);
-
     root_screen = xcb_aux_get_screen(conn, screen);
     root = root_screen->root;
 
@@ -885,9 +877,6 @@
             0, /* back pixel: black */
             XCB_EVENT_MASK_EXPOSURE |
                 XCB_EVENT_MASK_BUTTON_PRESS});
-    if (sncontext) {
-        sn_launchee_context_setup_window(sncontext, win);
-    }

     /* Map the window (make it visible) */
     xcb_map_window(conn, win);
@@ -949,12 +938,6 @@
         exit(-1);
     }

-    /* Startup complete. */
-    if (sncontext) {
-        sn_launchee_context_complete(sncontext);
-        sn_launchee_context_unref(sncontext);
-    }
-
     xcb_flush(conn);

     xcb_generic_event_t *event;
--- i3-nagbar/main.c
+++ i3-nagbar/main.c
@@ -32,9 +32,6 @@

 xcb_visualtype_t *visual_type = NULL;

-#define SN_API_NOT_YET_FROZEN 1
-#include <libsn/sn-launchee.h>
-
 #include "i3-nagbar-atoms.xmacro.h"

 #define MSG_PADDING logical_px(8)
@@ -431,11 +428,6 @@
     NAGBAR_ATOMS_XMACRO
 #undef xmacro

-    /* Init startup notification. */
-    SnDisplay *sndisplay = sn_xcb_display_new(conn, NULL, NULL);
-    SnLauncheeContext *sncontext = sn_launchee_context_new_from_environment(sndisplay, screens);
-    sn_display_unref(sndisplay);
-
     root_screen = xcb_aux_get_screen(conn, screens);
     root = root_screen->root;

@@ -493,9 +485,6 @@
                 XCB_EVENT_MASK_BUTTON_PRESS |
                 XCB_EVENT_MASK_BUTTON_RELEASE,
             cursor});
-    if (sncontext) {
-        sn_launchee_context_setup_window(sncontext, win);
-    }

     /* Map the window (make it visible) */
     xcb_map_window(conn, win);
@@ -556,12 +545,6 @@
     /* Initialize the drawable bar */
     draw_util_surface_init(conn, &bar, win, get_visualtype(root_screen), win_pos.width, win_pos.height);

-    /* Startup complete. */
-    if (sncontext) {
-        sn_launchee_context_complete(sncontext);
-        sn_launchee_context_unref(sncontext);
-    }
-
     /* Grab the keyboard to get all input */
     xcb_flush(conn);

--- include/data.h
+++ include/data.h
@@ -9,9 +9,6 @@
  */
 #pragma once

-#define SN_API_NOT_YET_FROZEN 1
-#include <libsn/sn-launcher.h>
-
 #include <xcb/randr.h>
 #include <pcre.h>
 #include <sys/time.h>
@@ -227,8 +224,6 @@
     char *id;
     /** workspace on which this startup was initiated */
     char *workspace;
-    /** libstartup-notification context for this launch */
-    SnLauncherContext *context;
     /** time at which this sequence should be deleted (after it was marked as
      * completed) */
     time_t delete_at;
--- include/i3.h
+++ include/i3.h
@@ -20,9 +20,6 @@

 #include <X11/XKBlib.h>

-#define SN_API_NOT_YET_FROZEN 1
-#include <libsn/sn-launcher.h>
-
 #include "queue.h"
 #include "data.h"
 #include "xcb.h"
@@ -52,7 +49,6 @@
  * and are used for some things, like determining a unique ID in startup
  * notification). */
 extern xcb_timestamp_t last_timestamp;
-extern SnDisplay *sndisplay;
 extern xcb_key_symbols_t *keysyms;
 extern char **start_argv;
 extern Display *xlibdpy, *xkbdpy;
--- include/startup.h
+++ include/startup.h
@@ -14,9 +14,6 @@

 #include <config.h>

-#define SN_API_NOT_YET_FROZEN 1
-#include <libsn/sn-monitor.h>
-
 /**
  * Starts the given application by passing it through a shell. We use double
  * fork to avoid zombie processes. As the started application’s parent exits
@@ -41,12 +38,6 @@
 void startup_sequence_delete(struct Startup_Sequence *sequence);

 /**
- * Called by libstartup-notification when something happens
- *
- */
-void startup_monitor_event(SnMonitorEvent *event, void *userdata);
-
-/**
  * Renames workspaces that are mentioned in the startup sequences.
  *
  */
--- meson.build
+++ meson.build
@@ -300,7 +300,6 @@
 rt_dep = cc.find_library('rt', required: false)
 iconv_dep = cc.find_library('iconv', required: false)

-libsn_dep = dependency('libstartup-notification-1.0', method: 'pkg-config')
 xcb_dep = dependency('xcb', method: 'pkg-config')
 xcb_xkb_dep = dependency('xcb-xkb', method: 'pkg-config')
 xcb_xinerama_dep = dependency('xcb-xinerama', method: 'pkg-config')
@@ -451,7 +450,6 @@
   m_dep,
   iconv_dep,
   rt_dep,
-  libsn_dep,
   xcb_dep,
   xcb_xkb_dep,
   xcb_xinerama_dep,
--- src/handlers.c
+++ src/handlers.c
@@ -14,8 +14,6 @@
 #include <time.h>

 #include <xcb/randr.h>
-#define SN_API_NOT_YET_FROZEN 1
-#include <libsn/sn-monitor.h>

 int randr_base = -1;
 int xkb_base = -1;
@@ -653,11 +651,6 @@
  *
  */
 static void handle_client_message(xcb_client_message_event_t *event) {
-    /* If this is a startup notification ClientMessage, the library will handle
-     * it and call our monitor_event() callback. */
-    if (sn_xcb_display_process_event(sndisplay, (xcb_generic_event_t *)event))
-        return;
-
     LOG("ClientMessage for window 0x%08x\n", event->window);
     if (event->type == A__NET_WM_STATE) {
         if (event->format != 32 ||
@@ -1206,8 +1199,6 @@
  *
  */
 void property_handlers_init(void) {
-    sn_monitor_context_new(sndisplay, conn_screen, startup_monitor_event, NULL, NULL);
-
     property_handlers[0].atom = A__NET_WM_NAME;
     property_handlers[1].atom = XCB_ATOM_WM_HINTS;
     property_handlers[2].atom = XCB_ATOM_WM_NAME;
--- src/main.c
+++ src/main.c
@@ -52,9 +52,6 @@
 /* The screen (0 when you are using DISPLAY=:0) of the connection 'conn' */
 int conn_screen;

-/* Display handle for libstartup-notification */
-SnDisplay *sndisplay;
-
 /* The last timestamp we got from X11 (timestamps are included in some events
  * and are used for some things, like determining a unique ID in startup
  * notification). */
@@ -558,8 +555,6 @@
     if (xcb_connection_has_error(conn))
         errx(EXIT_FAILURE, "Cannot open display");

-    sndisplay = sn_xcb_display_new(conn, NULL, NULL);
-
     /* Initialize the libev event loop. This needs to be done before loading
      * the config file because the parser will install an ev_child watcher
      * for the nagbar when config errors are found. */
--- src/startup.c
+++ src/startup.c
@@ -18,84 +18,10 @@
 #include <sys/wait.h>
 #include <unistd.h>

-#define SN_API_NOT_YET_FROZEN 1
-#include <libsn/sn-launcher.h>
-
 static TAILQ_HEAD(startup_sequence_head, Startup_Sequence) startup_sequences =
     TAILQ_HEAD_INITIALIZER(startup_sequences);

 /*
- * After 60 seconds, a timeout will be triggered for each startup sequence.
- *
- * The timeout will just trigger completion of the sequence, so the normal
- * completion process takes place (startup_monitor_event will free it).
- *
- */
-static void startup_timeout(EV_P_ ev_timer *w, int revents) {
-    const char *id = sn_launcher_context_get_startup_id(w->data);
-    DLOG("Timeout for startup sequence %s\n", id);
-
-    struct Startup_Sequence *current, *sequence = NULL;
-    TAILQ_FOREACH (current, &startup_sequences, sequences) {
-        if (strcmp(current->id, id) != 0)
-            continue;
-
-        sequence = current;
-        break;
-    }
-
-    /* Unref the context (for the timeout itself, see start_application) */
-    sn_launcher_context_unref(w->data);
-
-    if (!sequence) {
-        DLOG("Sequence already deleted, nevermind.\n");
-        free(w);
-        return;
-    }
-
-    /* Complete the startup sequence, will trigger its deletion. */
-    sn_launcher_context_complete(w->data);
-    free(w);
-}
-
-/*
- * Some applications (such as Firefox) mark a startup sequence as completed
- * *before* they even map a window. Therefore, we cannot entirely delete the
- * startup sequence once it’s marked as complete. Instead, we’ll mark it for
- * deletion in 30 seconds and use that chance to delete old sequences.
- *
- * This function returns the number of active (!) startup notifications, that
- * is, those which are not marked for deletion yet. This is used for changing
- * the root window cursor.
- *
- */
-static int _prune_startup_sequences(void) {
-    time_t current_time = time(NULL);
-    int active_sequences = 0;
-
-    /* Traverse the list and delete everything which was marked for deletion 30
-     * seconds ago or earlier. */
-    struct Startup_Sequence *current, *next;
-    for (next = TAILQ_FIRST(&startup_sequences);
-         next != TAILQ_END(&startup_sequences);) {
-        current = next;
-        next = TAILQ_NEXT(next, sequences);
-
-        if (current->delete_at == 0) {
-            active_sequences++;
-            continue;
-        }
-
-        if (current_time <= current->delete_at)
-            continue;
-
-        startup_sequence_delete(current);
-    }
-
-    return active_sequences;
-}
-
-/*
  * Deletes a startup sequence, ignoring whether its timeout has elapsed.
  * Useful when e.g. a window is moved between workspaces and its children
  * shouldn't spawn on the original workspace.
@@ -103,11 +29,6 @@
  */
 void startup_sequence_delete(struct Startup_Sequence *sequence) {
     assert(sequence != NULL);
-    DLOG("Deleting startup sequence %s, delete_at = %lld, current_time = %lld\n",
-         sequence->id, (long long)sequence->delete_at, (long long)time(NULL));
-
-    /* Unref the context, will be free()d */
-    sn_launcher_context_unref(sequence->context);

     /* Delete our internal sequence */
     TAILQ_REMOVE(&startup_sequences, sequence, sequences);
@@ -131,46 +52,6 @@
  *
  */
 void start_application(const char *command, bool no_startup_id) {
-    SnLauncherContext *context = NULL;
-
-    if (!no_startup_id) {
-        /* Create a startup notification context to monitor the progress of this
-         * startup. */
-        context = sn_launcher_context_new(sndisplay, conn_screen);
-        sn_launcher_context_set_name(context, "i3");
-        sn_launcher_context_set_description(context, "exec command in i3");
-        /* Chop off everything starting from the first space (if there are any
-         * spaces in the command), since we don’t want the parameters. */
-        char *first_word = sstrdup(command);
-        char *space = strchr(first_word, ' ');
-        if (space)
-            *space = '\0';
-        sn_launcher_context_initiate(context, "i3", first_word, last_timestamp);
-        free(first_word);
-
-        /* Trigger a timeout after 60 seconds */
-        struct ev_timer *timeout = scalloc(1, sizeof(struct ev_timer));
-        ev_timer_init(timeout, startup_timeout, 60.0, 0.);
-        timeout->data = context;
-        ev_timer_start(main_loop, timeout);
-
-        LOG("startup id = %s\n", sn_launcher_context_get_startup_id(context));
-
-        /* Save the ID and current workspace in our internal list of startup
-         * sequences */
-        Con *ws = con_get_workspace(focused);
-        struct Startup_Sequence *sequence = scalloc(1, sizeof(struct Startup_Sequence));
-        sequence->id = sstrdup(sn_launcher_context_get_startup_id(context));
-        sequence->workspace = sstrdup(ws->name);
-        sequence->context = context;
-        TAILQ_INSERT_TAIL(&startup_sequences, sequence, sequences);
-
-        /* Increase the refcount once (it starts with 1, so it will be 2 now) for
-         * the timeout. Even if the sequence gets completed, the timeout still
-         * needs the context (but will unref it then) */
-        sn_launcher_context_ref(context);
-    }
-
     LOG("executing: %s\n", command);
     if (fork() == 0) {
         /* Child process */
@@ -188,68 +69,12 @@
         signal(SIGPIPE, SIG_DFL);
         if (fork() == 0) {
             /* Setup the environment variable(s) */
-            if (!no_startup_id)
-                sn_launcher_context_setup_child_process(context);
-            setenv("I3SOCK", current_socketpath, 1);
-
             execl(_PATH_BSHELL, _PATH_BSHELL, "-c", command, NULL);
             /* not reached */
         }
         _exit(EXIT_SUCCESS);
     }
     wait(0);
-
-    if (!no_startup_id) {
-        /* Change the pointer of the root window to indicate progress */
-        xcursor_set_root_cursor(XCURSOR_CURSOR_WATCH);
-    }
-}
-
-/*
- * Called by libstartup-notification when something happens
- *
- */
-void startup_monitor_event(SnMonitorEvent *event, void *userdata) {
-    SnStartupSequence *snsequence;
-
-    snsequence = sn_monitor_event_get_startup_sequence(event);
-
-    /* Get the corresponding internal startup sequence */
-    const char *id = sn_startup_sequence_get_id(snsequence);
-    struct Startup_Sequence *current, *sequence = NULL;
-    TAILQ_FOREACH (current, &startup_sequences, sequences) {
-        if (strcmp(current->id, id) != 0)
-            continue;
-
-        sequence = current;
-        break;
-    }
-
-    if (!sequence) {
-        DLOG("Got event for startup sequence that we did not initiate (ID = %s). Ignoring.\n", id);
-        return;
-    }
-
-    switch (sn_monitor_event_get_type(event)) {
-        case SN_MONITOR_EVENT_COMPLETED:
-            DLOG("startup sequence %s completed\n", sn_startup_sequence_get_id(snsequence));
-
-            /* Mark the given sequence for deletion in 30 seconds. */
-            time_t current_time = time(NULL);
-            sequence->delete_at = current_time + 30;
-            DLOG("Will delete startup sequence %s at timestamp %lld\n",
-                 sequence->id, (long long)sequence->delete_at);
-
-            if (_prune_startup_sequences() == 0) {
-                DLOG("No more startup sequences running, changing root window cursor to default pointer.\n");
-                /* Change the pointer of the root window to indicate progress */
-                xcursor_set_root_cursor(XCURSOR_CURSOR_POINTER);
-            }
-            break;
-        default:
-            /* ignore */
-            break;
-    }
 }

 /*
